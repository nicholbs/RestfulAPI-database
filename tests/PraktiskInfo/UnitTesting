Link: https://codeception.com/docs/05-UnitTests

Create a test using generate:test command with a suite and test names as parameters:
- php vendor/bin/codecept generate:test unit Example
It creates a new ExampleTest file located in the tests/unit directory.

As always, you can run the newly created test with this command:
- php vendor/bin/codecept run unit ExampleTest

Or simply run the whole set of unit tests with:
- php vendor/bin/codecept run unit

A test created by the generate:test command will look like this:
class ExampleTest extends \Codeception\Test\Unit
{
    /**
     * @var \UnitTester
     */
    protected $tester;

    protected function _before()
    {
    }

    protected function _after()
    {
    }

    // tests
    public function testMe()
    {

    }
}

Inside a class:
all public methods with test prefix are tests
_before method is executed before each test (like setUp in PHPUnit)
_after method is executed after each test (like tearDown in PHPUnit)

UNIT TESTING
Unit tests are focused around a single component of an application. All external dependencies for components should be replaced with test doubles.
A typical unit test may look like this:
class UserTest extends \Codeception\Test\Unit
{
    public function testValidation()
    {
        $user = new User();

        $user->setName(null);
        $this->assertFalse($user->validate(['username']));

        $user->setName('toolooooongnaaaaaaameeee');
        $this->assertFalse($user->validate(['username']));

        $user->setName('davert');
        $this->assertTrue($user->validate(['username']));
    }
}

TESTING DATABASE
Let’s see how you can do some database testing:


function testSavingUser()
{
    $user = new User();
    $user->setName('Miles');
    $user->setSurname('Davis');
    $user->save();
    $this->assertEquals('Miles Davis', $user->getFullName());
    $this->tester->seeInDatabase('users', ['name' => 'Miles', 'surname' => 'Davis']);
}
To enable the database functionality in unit tests, make sure the Db module is included in the unit.suite.yml configuration file. 
The database will be cleaned and populated after each test, the same way it happens for acceptance and functional tests. 
If that’s not your required behavior, change the settings of the Db module for the current suite. See Db Module